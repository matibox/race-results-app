// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

//! Uncomment after switch to mysql/postgresql
// enum RoleName {
//   driver
//   manager
// }

// enum EventType {
//   sprint
//   endurance
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id      String @id @default(cuid())
  name    String
  userId  String @unique
  manager User   @relation(fields: [userId], references: [id], name: "manager-team")
  drivers User[]
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  roles          Role[]
  championships  Championship[]
  events         Event[]        @relation(name: "drivers")
  managingEvents Event[]        @relation(name: "manager")
  managingTeam   Team?          @relation(name: "manager-team")
  Team           Team?          @relation(fields: [teamId], references: [id])
  teamId         String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id   String @id @default(cuid())
  name String @unique //RoleName

  users User[]
}

model Championship {
  id        String  @id @default(cuid())
  organizer String
  link      String
  events    Event[]
  drivers   User[]
}

model Event {
  id             String        @id @default(cuid())
  title          String
  date           DateTime
  type           String //EventType
  car            String
  track          String
  length         Int
  championshipId String?
  managerId      String?       @unique
  championship   Championship? @relation(fields: [championshipId], references: [id])
  drivers        User[]        @relation(name: "drivers")
  manager        User?         @relation(fields: [managerId], references: [id], name: "manager")
}
